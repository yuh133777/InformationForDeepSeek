-- Decompiler will be improved VERY SOON!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2025-03-22 15:29:35
-- Luau version 6, Types version 3
-- Time taken: 0.003106 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Assets_upvr = ReplicatedStorage:WaitForChild("Assets")
local __DEBRIS_upvr = workspace:WaitForChild("__DEBRIS")
local Functions_upvr = require(ReplicatedStorage:WaitForChild("Library").Functions)
local RunService_upvr = game:GetService("RunService")
return function(arg1, arg2, arg3, arg4) -- Line 39
	--[[ Upvalues[4]:
		[1]: Assets_upvr (readonly)
		[2]: __DEBRIS_upvr (readonly)
		[3]: Functions_upvr (readonly)
		[4]: RunService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var15
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var15 = arg1
		return CFrame.new(var15)
	end
	if var15 ~= "Vector3" or not INLINED() then
	end
	var15 = arg4
	if not var15 then
		var15 = {}
	end
	local color = var15.color
	if not color then
		color = Color3.new(1, 1, 1)
	end
	local var17_upvr = var15.time or 3
	local clone_upvr = Assets_upvr.Billboards:FindFirstChild("Reward"):Clone()
	local Part_upvr = Instance.new("Part")
	Part_upvr.Anchored = true
	Part_upvr.CanCollide = false
	Part_upvr.Size = Vector3.new()
	Part_upvr.Transparency = 1
	Part_upvr.CFrame = arg1
	Part_upvr.Name = "RewardBillboard"
	Part_upvr.Parent = __DEBRIS_upvr
	clone_upvr.amount.Text = arg2
	clone_upvr.amount.TextColor3 = color
	clone_upvr.icon.Image = arg3
	clone_upvr.icon.shadow.Image = arg3
	clone_upvr.Parent = Part_upvr
	coroutine.wrap(function() -- Line 72
		--[[ Upvalues[2]:
			[1]: clone_upvr (readonly)
			[2]: Functions_upvr (copied, readonly)
		]]
		clone_upvr.Size = UDim2.new(clone_upvr.Size.X.Scale * 1.3, clone_upvr.Size.X.Offset * 1.3, clone_upvr.Size.Y.Scale * 1.3, clone_upvr.Size.Y.Offset * 1.3)
		Functions_upvr.Wait(0.05)
		Functions_upvr.Tween(clone_upvr, {
			Size = clone_upvr.Size;
		}, {0.1, "Sine", "Out"})
	end)()
	coroutine.wrap(function() -- Line 81
		--[[ Upvalues[4]:
			[1]: clone_upvr (readonly)
			[2]: var17_upvr (readonly)
			[3]: Functions_upvr (copied, readonly)
			[4]: RunService_upvr (copied, readonly)
		]]
		local os_clock_result1 = os.clock()
		while os.clock() - os_clock_result1 <= var17_upvr do
			clone_upvr.StudsOffsetWorldSpace += Vector3.new(0, 3 * Functions_upvr.Easing((os.clock() - os_clock_result1) / var17_upvr, "Linear", "InOut"), 0)
			RunService_upvr.RenderStepped:Wait()
		end
	end)()
	for _, v in ipairs(clone_upvr:GetDescendants()) do
		if v.ClassName == "TextLabel" then
			local _ = {
				TextTransparency = 1;
				TextStrokeTransparency = 1;
			}
			local _ = {0.5, "Linear", "Out"}
		elseif v.ClassName == "ImageLabel" then
		elseif v.ClassName == "UIStroke" then
			Functions_upvr.Tween(v, {
				Transparency = 1;
			}, {0.5, "Linear", "Out"}, var17_upvr - 0.5)
		end
	end
	Functions_upvr.Tween(v, {
		ImageTransparency = 1;
	}, {0.5, "Linear", "Out"}, var17_upvr - 0.5).Completed:Connect(function() -- Line 104
		--[[ Upvalues[1]:
			[1]: Part_upvr (readonly)
		]]
		Part_upvr:Destroy()
	end)
	return clone_upvr
end
